<% provide(:title, 'Edit')%>
<h1>Update your profile</h1>

<div class="row">
  <div class="col-md-6 col-md-offset-3">
    <%= form_with(model: @user, local: true) do |f| %>
      <%# 1. When constructing a form using form_with(@user), Rails uses POST
            if @user.new_record? is true and PATCH if it is false. %>
      <%# 2. Since web browsers can’t natively send PATCH requests Rails fakes
            it with a POST request and a HIDDEN INPUT field (this field can be
            checked when the form is rendered with a web inspector) %>
      <%= render 'shared/error_messages'%>

      <%= f.label :name %>
      <%= f.text_field :name, class: 'form-control' %>

      <%= f.label :email %>
      <%= f.email_field :email, class: 'form-control' %>

      <%= f.label :password %>
      <%= f.password_field :password, class: 'form-control' %>

      <%= f.label :password_confirmation, "Confirmation" %>
      <%= f.password_field :password_confirmation, class: 'form-control' %>

    <%= f.submit "Create my account", class: "btn btn-primary" %>
    <% end %>

    <div class="gravatar_edit"> <%= gravatar_for @user %>
      <%# 1. target="_blank" - opens the link in a new window %>
      <%# 2. There’s a minor security issue associated with using target="_blank"
              to open URLs—namely, the target site gains control of the
              “window object” associated with the HTML document. As a result,
              the target site could potentially introduce malicious content,
              such as a phishing page. This risk can be eliminated entirely
              by setting the rel attribute (“relationship”) to "noopener"
              in the origin link %>
      <a href="https://gravatar.com/emails" target="_blank" rel=”noopener”>change</a>
    </div>
  </div>
</div>